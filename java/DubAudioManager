package com.zybang.speakpractice.englishdub.engine;

import android.media.MediaCodec;
import android.media.MediaExtractor;
import android.media.MediaFormat;

import com.baidu.homework.base.Callback;
import com.baidu.homework.base.ICallback;
import com.baidu.homework.common.utils.FileUtils;
import com.coremedia.iso.boxes.Container;
import com.googlecode.mp4parser.FileDataSourceImpl;
import com.googlecode.mp4parser.authoring.Movie;
import com.googlecode.mp4parser.authoring.Track;
import com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;
import com.googlecode.mp4parser.authoring.container.mp4.MovieCreator;
import com.googlecode.mp4parser.authoring.tracks.AACTrackImpl;
import com.zybang.evaluate.EvaluateConfig;
import com.zybang.evaluate.EvaluateManager;
import com.zybang.evaluate.EvaluateRequest;
import com.zybang.evaluate.EvaluateResult;
import com.zybang.evaluate.IEvaluateCallback;
import com.zybang.evaluate.recorder.IPcmRecorderListener;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.atomic.AtomicBoolean;

public class DubAudioManager {
    public static final int SAMPLE_RATE = 16000;
    public static final int BYTE_PER_FRAME = 2;
    private static DubAudioManager mInstance;

    private DubAudioManager() {}

    public static DubAudioManager getInstance() {
        if (mInstance == null) {
            synchronized (DubAudioManager.class) {
                if (mInstance == null) {
                    mInstance = new DubAudioManager();
                }
            }
        }
        return mInstance;
    }

    /**
     * 把mp3文件转成pcm
     * @param mp3Path
     * @param pcmPath
     * @return
     */
    public boolean convertMp3ToPcm(String mp3Path, String pcmPath) {
        MediaCodec mediaDecode = null;
        MediaExtractor mediaExtractor = new MediaExtractor();//此类可分离视频文件的音轨和视频轨道
        try {
            mediaExtractor.setDataSource(mp3Path);//媒体文件的位置
            for (int i = 0; i < mediaExtractor.getTrackCount(); i++) {//遍历媒体轨道 此处我们传入的是音频文件，所以也就只有一条轨道
                MediaFormat format = mediaExtractor.getTrackFormat(i);
                String mime = format.getString(MediaFormat.KEY_MIME);
                if (mime.startsWith("audio")) {//获取音频轨道
                    mediaExtractor.selectTrack(i);//选择此音频轨道
                    mediaDecode = MediaCodec.createDecoderByType(mime);//创建Decode解码器
                    mediaDecode.configure(format, null, null, 0);
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        if (mediaDecode == null) {
            return false;
        }
        mediaDecode.start();//启动MediaCodec ，等待传入数据
        ByteBuffer[] decodeInputBuffers = mediaDecode.getInputBuffers();//MediaCodec在此ByteBuffer[]中获取输入数据
        ByteBuffer[] decodeOutputBuffers = mediaDecode.getOutputBuffers();//MediaCodec将解码后的数据放到此ByteBuffer[]中 我们可以直接在这里面得到PCM数据
        MediaCodec.BufferInfo decodeBufferInfo = new MediaCodec.BufferInfo();//用于描述解码得到的byte[]数据的相关信息

        FileOutputStream fos;
        File dstFile = new File(pcmPath);
        if (dstFile.exists()) {
            dstFile.delete();
        }

        try {
            dstFile.createNewFile();
            fos = new FileOutputStream(dstFile);
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        boolean codeOver = false;
        while (!codeOver) {
            try {
                for (int i = 0; i < decodeInputBuffers.length - 1; i++) {
                    int inputIndex = mediaDecode.dequeueInputBuffer(-1);//获取可用的inputBuffer -1代表一直等待，0表示不等待 建议-1,避免丢帧
                    if (inputIndex < 0) {
                        codeOver = true;
                        break;
                    }
                    ByteBuffer inputBuffer = decodeInputBuffers[inputIndex];//拿到inputBuffer
                    inputBuffer.clear();//清空之前传入inputBuffer内的数据
                    int sampleSize = mediaExtractor.readSampleData(inputBuffer, 0);//MediaExtractor读取数据到inputBuffer中
                    if (sampleSize < 0) {//小于0 代表所有数据已读取完成
                        codeOver = true;
                    } else {
                        mediaDecode.queueInputBuffer(inputIndex, 0, sampleSize, 0, 0);//通知MediaDecode解码刚刚传入的数据
                        mediaExtractor.advance();//MediaExtractor移动到下一取样处
                    }
                }
            } catch (IllegalStateException e) {
                e.printStackTrace();
                return false;
            }

            //获取解码得到的byte[]数据 参数BufferInfo上面已介绍 10000同样为等待时间 同上-1代表一直等待，0代表不等待。此处单位为微秒
            //此处建议不要填-1 有些时候并没有数据输出，那么他就会一直卡在这 等待
            int outputIndex = mediaDecode.dequeueOutputBuffer(decodeBufferInfo, 10000);
            ByteBuffer outputBuffer;
            byte[] chunkPCM;
            while (outputIndex >= 0) {//每次解码完成的数据不一定能一次吐出 所以用while循环，保证解码器吐出所有数据
                outputBuffer = decodeOutputBuffers[outputIndex];//拿到用于存放PCM数据的Buffer
                chunkPCM = new byte[decodeBufferInfo.size];//BufferInfo内定义了此数据块的大小
                outputBuffer.get(chunkPCM);//将Buffer内的数据取出到字节数组中
                outputBuffer.clear();//数据取出后一定记得清空此Buffer MediaCodec是循环使用这些Buffer的，不清空下次会得到同样的数据
                try {
                    fos.write(chunkPCM);
                } catch (IOException e) {
                    e.printStackTrace();
                    codeOver = true;
                    break;
                }
                mediaDecode.releaseOutputBuffer(outputIndex, false);//此操作一定要做，不然MediaCodec用完所有的Buffer后 将不能向外输出数据
                outputIndex = mediaDecode.dequeueOutputBuffer(decodeBufferInfo, 10000);//再次获取数据，如果没有数据输出则outputIndex=-1 循环结束
            }
        }
        return true;
    }

    /**
     * 合成最后的视频
     * @param rawVideoPath 原视频的路径
     * @param bgAudioPcmPath 背景音的path
     * @param timeSeeks pcm偏移时间(ms)
     * @param pcmPathList pcm录音的列表
     * @param dstVideoPath 合成视频的路径
     */
    public boolean mergeVideo(String rawVideoPath, String bgAudioPcmPath, String[] pcmPathList, long[] timeSeeks, String dstVideoPath) {
        return mergeVideo(rawVideoPath, bgAudioPcmPath, pcmPathList, timeSeeks, dstVideoPath, null);
    }


    /**
     * 合成最后的视频
     * @param rawVideoPath 原视频的路径
     * @param bgAudioPcmPath 背景音的path
     * @param timeSeeks pcm偏移时间(ms)
     * @param pcmPathList pcm录音的列表
     * @param dstVideoPath 合成视频的路径
     * @param progressCallback 进度回调
     */
    public boolean mergeVideo(String rawVideoPath, String bgAudioPcmPath, String[] pcmPathList, long[] timeSeeks, String dstVideoPath, final Callback<Float> progressCallback) {
        RandomAccessFile randomAccessFile = null;
        FileOutputStream pcmAudioOutput = null;
        FileOutputStream dstVideoOutput = null;
        try {
            randomAccessFile = new RandomAccessFile(bgAudioPcmPath, "r");
            if (pcmPathList.length != timeSeeks.length) {
                return false;
            }
            FileUtils.delFile(dstVideoPath);
            File dstFile = new File(dstVideoPath);

            if (!dstFile.getParentFile().exists()) {
                dstFile.getParentFile().mkdirs();
            }
            File dstPCMAudio = new File(dstFile.getParentFile(), dstFile.getName()+"_PCM");

            FileUtils.delFile(dstPCMAudio);
            dstPCMAudio.createNewFile();
            if (progressCallback != null) {
                progressCallback.callback(0.05f);
            }

            pcmAudioOutput = new FileOutputStream(dstPCMAudio);
            int startLen = 0;
            for (int i = 0; i < pcmPathList.length; i++) {
                String pcmPath = pcmPathList[i];
                long timeSeek = timeSeeks[i];
                int byteSeek = (int) (timeSeek / 1000f * SAMPLE_RATE * BYTE_PER_FRAME);
                if (startLen < byteSeek) {
                    writeSnap(pcmAudioOutput, randomAccessFile, startLen, byteSeek);
                }
                randomAccessFile.seek(byteSeek);
                byte[] pcmBytes = FileUtils.readFile(new File(pcmPath));
                byte[] bgBytes = new byte[pcmBytes.length];
                randomAccessFile.read(bgBytes);
                ByteBuffer resultBuffer = ByteBuffer.allocate(pcmBytes.length * 2);
                int mixLen = pcmMixEx(pcmBytes, bgBytes, pcmBytes.length, bgBytes.length, resultBuffer);
                pcmAudioOutput.write(resultBuffer.array(), 0, mixLen);
                startLen = byteSeek + pcmBytes.length;
            }

            int bgFileLen = (int) randomAccessFile.length();

            if (progressCallback != null) {
                progressCallback.callback(0.2f);
            }

            if (startLen < bgFileLen) {
                writeSnap(pcmAudioOutput, randomAccessFile, startLen, bgFileLen);
            }

            if (progressCallback != null) {
                progressCallback.callback(0.35f);
            }

            File dstAACAudio = new File(dstFile.getParentFile(), dstFile.getName()+"_AAC");
            AACEncoder aacEncoder = new AACEncoder();
            aacEncoder.setProgressCallback(new Callback<Float>() {
                float progress = 0.35f;
                @Override
                public void callback(Float p) {
                    // 0.65f
                    if (progressCallback != null) {
                        progressCallback.callback(progress + p * 0.55f);
                    }
                }
            });
            aacEncoder.start(dstPCMAudio.getAbsolutePath(), dstAACAudio.getAbsolutePath());

            AACTrackImpl aacTrack = new AACTrackImpl(new FileDataSourceImpl(dstAACAudio));
            Movie m = null;
            try {
                m = MovieCreator.build(rawVideoPath);
            } catch (IOException e) {
                e.printStackTrace();
            }

            Movie movie = new Movie();
            for (Track t : m.getTracks()) { // Re-use all tracks besides the audio track
                if ("vide".equals(t.getHandler())) {
                    movie.addTrack(t);
                }
            }
            movie.addTrack(aacTrack); // add the new audio track
            Container c = new DefaultMp4Builder().build(movie);
            try {
                dstVideoOutput = new FileOutputStream(dstVideoPath);
                c.writeContainer(dstVideoOutput.getChannel());
            } catch (IOException e) {
                e.printStackTrace();
            }

            if (progressCallback != null) {
                progressCallback.callback(0.95f);
            }

            // clear temp files
            FileUtils.delFile(dstAACAudio);
            pcmAudioOutput.close();
            FileUtils.delFile(dstPCMAudio);

            if (progressCallback != null) {
                progressCallback.callback(1f);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (randomAccessFile != null) {
                    randomAccessFile.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            try {
                if (pcmAudioOutput != null) {
                    pcmAudioOutput.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            try {
                if (dstVideoOutput != null) {
                    dstVideoOutput.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return true;
    }

    private static void writeSnap(FileOutputStream fos, RandomAccessFile inFile, int start, int end) throws IOException {
        if (end > start) {
            byte[] buffer = new byte[1024];
            inFile.seek(start);
            int copyLen = end - start;
            int len;
            while ((len = inFile.read(buffer)) > 0) {
                if (copyLen > len) {
                    fos.write(buffer, 0, len);
                    copyLen -= len;
                } else {
                    fos.write(buffer, 0, copyLen);
                    break;
                }
            }
        }
    }

    private static int pcmMixEx(byte[] bArr, byte[] bArr2, int i, int i2, ByteBuffer byteBuffer) {
        if (bArr == null || bArr2 == null) {
            return -1;
        } else if (i != i2) {
            return -1;
        } else {
            int i3 = i2 >> 1;
            for (int i4 = 0; i4 < i3; i4++) {
                short pixValue = pixValue((short) ((bArr[i4 * 2] & 255) | ((bArr[(i4 * 2) + 1] & 255) << 8)), (short) ((bArr2[i4 * 2] & 255) | ((bArr2[(i4 * 2) + 1] & 255) << 8)));
                byteBuffer.array()[i4 * 2] = (byte) ((pixValue >>> 0) & 255);
                byteBuffer.array()[(i4 * 2) + 1] = (byte) ((pixValue >>> 8) & 255);
            }
            return i;
        }
    }

    private static short pixValue(short s, int i) {
        if (s >= (short) 0 || i >= 0) {
            return (short) ((int) (((double) (s + i)) - (((double) (s * i)) / (Math.pow(2.0d, 15.0d) - 1.0d))));
        }
        return (short) ((int) (((double) (s + i)) - (((double) (s * i)) / (-(Math.pow(2.0d, 15.0d) - 1.0d)))));
    }


    /**
     * 开始评测，并且指定录音长度
     * @param config
     * @param callback
     * @param recordLen 录音长度，单位毫秒
     * @return
     */
    public EvaluateRequest startEvaluate(EvaluateConfig config, final IEvaluateCallback callback, String pcmPath, long recordLen) {
        final LinkedBlockingDeque<short[]> blockingDeque =  new LinkedBlockingDeque<>();
        final PCMRecorder pcmRecorder = new PCMRecorder(pcmPath, blockingDeque, recordLen);
        final EvaluateRequest request = EvaluateManager.getInstance().startEvaluate(config, new IEvaluateCallback() {
            @Override
            public void onStart() {
                if (callback != null) {
                    callback.onStart();
                }
            }

            @Override
            public void onStop() {
                if (pcmRecorder != null) {
                    pcmRecorder.stop();
                }
                if (callback != null) {
                    callback.onStop();
                }
            }

            @Override
            public void onCancel() {
                if (callback != null) {
                    callback.onCancel();
                }
            }

            @Override
            public void onRecording(int volume) {
                if (callback != null) {
                    callback.onRecording(volume);
                }
            }

            @Override
            public void onResult(EvaluateResult result) {
                if (callback != null) {
                    callback.onResult(result);
                }
            }

            @Override
            public void onError(int errorCode, String desc) {
                if (callback != null) {
                    callback.onError(errorCode, desc);
                }
            }
        });
        pcmRecorder.init();
        pcmRecorder.setStopListener(new ICallback() {
            @Override
            public void call() {
                if (request != null) {
                    request.stopEvaluate();
                }
            }
        });
        request.registerPcmListener(new IPcmRecorderListener() {
            @Override
            public void onPCMData(short[] pcmData, int readSize) {
                if (!pcmRecorder.isStop()) {
                    short[] data = new short[readSize];
                    System.arraycopy(pcmData, 0, data, 0, readSize);
                    blockingDeque.add(data);
                }
            }
        });
        new Thread(pcmRecorder).start();
        return request;
    }

    /**
     * 获取16k 16位 pcm数据的实际录音时长（ms）
     * @param dataLen pcm的字节数
     * @return
     */
    public static long getPcmLen(long dataLen) {
        return (long)(dataLen * 1000f / (SAMPLE_RATE * BYTE_PER_FRAME));
    }

    public static byte[] getByteBuffer(short[] shortArray, int shortArrayLength, boolean bigEnding) {
        int actualShortArrayLength = shortArray.length;
        if (shortArrayLength > actualShortArrayLength) {
            shortArrayLength = actualShortArrayLength;
        }
        short shortValue;
        byte[] byteArray = new byte[2 * shortArrayLength];
        for (int i = 0; i < shortArrayLength; i++) {
            shortValue = shortArray[i];
            if (bigEnding) {
                byteArray[i * 2 + 1] = (byte) (shortValue & 0x00ff);
                shortValue >>= 8;
                byteArray[i * 2] = (byte) (shortValue & 0x00ff);
            } else {
                byteArray[i * 2] = (byte) (shortValue & 0x00ff);
                shortValue >>= 8;
                byteArray[i * 2 + 1] = (byte) (shortValue & 0x00ff);
            }
        }
        return byteArray;
    }

    private static class PCMRecorder implements Runnable {
        String dstPath;
        LinkedBlockingDeque<short[]> blockingDeque;
        FileOutputStream fos;
        AtomicBoolean isStop;
        long recordLen;
        ICallback stopListener;

        public PCMRecorder(String dstPath, LinkedBlockingDeque<short[]> blockingDeque, long recordLen) {
            this.dstPath = dstPath;
            this.blockingDeque = blockingDeque;
            this.recordLen = recordLen;
        }

        public void setStopListener(ICallback callback) {
            stopListener = callback;
        }

        public void init() {
            isStop = new AtomicBoolean(false);
            File f = new File(dstPath);
            if (f.exists()) {
                f.delete();
            }
            try {
                f.createNewFile();
                fos = new FileOutputStream(f);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public boolean isStop() {
            return isStop.get();
        }

        public void stop() {
            isStop.set(true);
            try {
                if (fos != null) {
                    fos.flush();
                    fos.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            Thread.currentThread().interrupt();
            blockingDeque.clear();
            if (stopListener != null) {
                stopListener.call();
            }
        }

        @Override
        public void run() {
            while (!isStop.get()) {
                try {
                    short[] data = blockingDeque.take();
                    if (data != null) {
                        try {
                            byte[] buffer = getByteBuffer(data, data.length, false);
                            fos.write(buffer);
                            recordLen -= getPcmLen(buffer.length);
                            if (recordLen <= 0) {
                                stop();
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    } else {
                        isStop.set(true);
                        break;
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
