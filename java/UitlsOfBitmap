
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.Point;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory.Options;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;

public class BitmapUtil {
    private static final int MAX_DECODE_LOOP = 8;

    public BitmapUtil() {
    }

    public static Bitmap getThumbnailBitmapFromFile(File img, long maxArea) throws Exception {
        if(maxArea > 0L && img != null) {
            int inSampleSize = 1;
            Options options = new Options();
            if(maxArea != 2147483647L) {
                Options decodeOptions = new Options();
                decodeOptions.inJustDecodeBounds = true;
                BitmapFactory.decodeFile(img.getAbsolutePath(), decodeOptions);
                int actualWidth = decodeOptions.outWidth;
                int actualHeight = decodeOptions.outHeight;
                decodeOptions.inJustDecodeBounds = false;
                long actualArea = (long)(actualWidth * actualHeight);
                long resultArea = actualArea;

                for(int i = 0; resultArea > maxArea; resultArea = actualArea / (long)((int)Math.pow(2.0D, (double)inSampleSize))) {
                    ++i;
                    inSampleSize = (int)Math.pow(2.0D, (double)i);
                }
            }

            options.inSampleSize = inSampleSize;
            Bitmap result = decodeFile(img.getAbsolutePath(), options, 8);
            return result;
        } else {
            return null;
        }
    }

    public static Bitmap decodeFile(String filePath, Options options, int loop) throws Exception {
        while(loop > 0) {
            try {
                Bitmap bitmap = BitmapFactory.decodeFile(filePath, options);
                return bitmap;
            } catch (OutOfMemoryError var5) {
                options.inSampleSize *= 2;
                --loop;
                decodeFile(filePath, options, loop);
            }
        }

        throw new Exception();
    }

    public static Bitmap getThumbnailBitmapFromFile(File img, int maxWidth, int maxHeight) {
        return getThumbnailBitmapFromFile(img, maxWidth, maxHeight, (Config)null);
    }

    public static Bitmap getThumbnailBitmapFromFile(File img, int maxWidth, int maxHeight, Config config) {
        try {
            if(img == null) {
                return null;
            } else {
                Options decodeOptions = new Options();
                decodeOptions.inJustDecodeBounds = true;
                BitmapFactory.decodeFile(img.getAbsolutePath(), decodeOptions);
                int actualWidth = decodeOptions.outWidth;
                int actualHeight = decodeOptions.outHeight;
                int desiredWidth = getResizedDimension(maxWidth, maxHeight, actualWidth, actualHeight);
                int desiredHeight = getResizedDimension(maxHeight, maxWidth, actualHeight, actualWidth);
                decodeOptions.inJustDecodeBounds = false;
                if(config != null) {
                    decodeOptions.inPreferredConfig = config;
                }

                decodeOptions.inSampleSize = findBestSampleSize(actualWidth, actualHeight, desiredWidth, desiredHeight);
                Bitmap tempBitmap = BitmapFactory.decodeFile(img.getAbsolutePath(), decodeOptions);
                Bitmap bitmap;
                if(tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
                    bitmap = Bitmap.createScaledBitmap(tempBitmap, desiredWidth > 0?desiredWidth:1, desiredHeight > 0?desiredHeight:1, true);
                    tempBitmap.recycle();
                } else {
                    bitmap = tempBitmap;
                }

                return bitmap;
            }
        } catch (OutOfMemoryError var11) {
            return null;
        }
    }

    public static Bitmap getThumbnailBitmapFromData(byte[] imgData, int maxWidth, int maxHeight) {
        try {
            if(imgData == null) {
                return null;
            } else {
                Options decodeOptions = new Options();
                decodeOptions.inJustDecodeBounds = true;
                BitmapFactory.decodeByteArray(imgData, 0, imgData.length, decodeOptions);
                int actualWidth = decodeOptions.outWidth;
                int actualHeight = decodeOptions.outHeight;
                int desiredWidth = getResizedDimension(maxWidth, maxHeight, actualWidth, actualHeight);
                int desiredHeight = getResizedDimension(maxHeight, maxWidth, actualHeight, actualWidth);
                decodeOptions.inJustDecodeBounds = false;
                decodeOptions.inSampleSize = findBestSampleSize(actualWidth, actualHeight, desiredWidth, desiredHeight);
                Bitmap tempBitmap = BitmapFactory.decodeByteArray(imgData, 0, imgData.length, decodeOptions);
                Bitmap bitmap;
                if(tempBitmap == null || tempBitmap.getWidth() <= desiredWidth && tempBitmap.getHeight() <= desiredHeight) {
                    bitmap = tempBitmap;
                } else {
                    bitmap = Bitmap.createScaledBitmap(tempBitmap, desiredWidth > 0?desiredWidth:1, desiredHeight > 0?desiredHeight:1, true);
                    tempBitmap.recycle();
                }

                return bitmap;
            }
        } catch (OutOfMemoryError var10) {
            return null;
        }
    }

    public static Bitmap getThumbnailBitmapFromByteArray(byte[] imgData, int maxWidth, int maxHeight) {
        try {
            if(imgData.length == 0) {
                return null;
            } else {
                Options decodeOptions = new Options();
                decodeOptions.inJustDecodeBounds = true;
                BitmapFactory.decodeByteArray(imgData, 0, imgData.length, decodeOptions);
                int actualWidth = decodeOptions.outWidth;
                int actualHeight = decodeOptions.outHeight;
                int desiredWidth = getResizedDimension(maxWidth, maxHeight, actualWidth, actualHeight);
                int desiredHeight = getResizedDimension(maxHeight, maxWidth, actualHeight, actualWidth);
                decodeOptions.inJustDecodeBounds = false;
                decodeOptions.inSampleSize = findBestSampleSize(actualWidth, actualHeight, desiredWidth, desiredHeight);
                Bitmap tempBitmap = BitmapFactory.decodeByteArray(imgData, 0, imgData.length, decodeOptions);
                Bitmap bitmap;
                if(tempBitmap == null || tempBitmap.getWidth() <= desiredWidth && tempBitmap.getHeight() <= desiredHeight) {
                    bitmap = tempBitmap;
                } else {
                    bitmap = Bitmap.createScaledBitmap(tempBitmap, desiredWidth > 0?desiredWidth:1, desiredHeight > 0?desiredHeight:1, true);
                    tempBitmap.recycle();
                }

                return bitmap;
            }
        } catch (OutOfMemoryError var10) {
            return null;
        }
    }

    public static boolean writeToFile(Bitmap bitmap, File file, int quality) {
        if(bitmap == null) {
            return false;
        } else {
            FileOutputStream fOut = null;

            boolean var5;
            try {
                if(file.exists()) {
                    file.delete();
                }

                if(!file.createNewFile()) {
                    return false;
                }

                fOut = new FileOutputStream(file);
                bitmap.compress(CompressFormat.JPEG, quality, fOut);
                boolean var4 = true;
                return var4;
            } catch (Exception var16) {
                var16.printStackTrace();
                var5 = false;
            } finally {
                try {
                    fOut.flush();
                    fOut.close();
                } catch (Exception var15) {
                    var15.printStackTrace();
                }

            }

            return var5;
        }
    }

    static int findBestSampleSize(int actualWidth, int actualHeight, int desiredWidth, int desiredHeight) {
        double wr = (double)actualWidth / (double)desiredWidth;
        double hr = (double)actualHeight / (double)desiredHeight;
        double ratio = Math.min(wr, hr);

        float n;
        for(n = 1.0F; (double)(n * 2.0F) <= ratio; n *= 2.0F) {
            ;
        }

        return (int)n;
    }

    public static int getResizedDimension(int maxPrimary, int maxSecondary, int actualPrimary, int actualSecondary) {
        if(maxPrimary == 0 && maxSecondary == 0) {
            return actualPrimary;
        } else {
            double ratio;
            if(maxPrimary == 0) {
                ratio = (double)maxSecondary / (double)actualSecondary;
                return (int)((double)actualPrimary * ratio);
            } else if(maxSecondary == 0) {
                return maxPrimary;
            } else {
                ratio = (double)actualSecondary / (double)actualPrimary;
                int resized = maxPrimary;
                if((double)maxPrimary * ratio > (double)maxSecondary) {
                    resized = (int)((double)maxSecondary / ratio);
                }

                return resized;
            }
        }
    }

    public static int getBitmapWidth(String filePath) {
        Options decodeOptions = new Options();
        decodeOptions.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(filePath, decodeOptions);
        int actualWidth = decodeOptions.outWidth;
        decodeOptions.inJustDecodeBounds = false;
        return actualWidth;
    }

    public static int getBitmapHeight(String filePath) {
        Options decodeOptions = new Options();
        decodeOptions.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(filePath, decodeOptions);
        int actualHeight = decodeOptions.outHeight;
        decodeOptions.inJustDecodeBounds = false;
        return actualHeight;
    }

    public static Point getBitmapSize(String filePath) {
        Point point = new Point();
        Options decodeOptions = new Options();
        decodeOptions.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(filePath, decodeOptions);
        point.y = decodeOptions.outHeight;
        point.x = decodeOptions.outWidth;
        decodeOptions.inJustDecodeBounds = false;
        return point;
    }

    public static Point getBitmapSize(byte[] imgData) {
        Point point = new Point();
        Options decodeOptions = new Options();
        decodeOptions.inJustDecodeBounds = true;
        BitmapFactory.decodeByteArray(imgData, 0, imgData.length, decodeOptions);
        point.y = decodeOptions.outHeight;
        point.x = decodeOptions.outWidth;
        decodeOptions.inJustDecodeBounds = false;
        return point;
    }

    public static Bitmap replaceColor(Bitmap bitmap, int srcColor, int destColor) {
        int w = bitmap.getWidth();
        int h = bitmap.getHeight();
        Bitmap newBitmap = null;

        try {
            int[] pixels = new int[w * h];
            bitmap.getPixels(pixels, 0, w, 0, 0, w, h);

            for(int i = pixels.length - 1; i > -1; --i) {
                if(pixels[i] == srcColor) {
                    pixels[i] = destColor;
                }
            }

            newBitmap = Bitmap.createBitmap(pixels, w, h, Config.ARGB_8888);
        } catch (OutOfMemoryError var8) {
            if(null != newBitmap) {
                newBitmap.recycle();
                return null;
            }
        }

        return newBitmap;
    }

    public static byte[] bitmap2Bytes(Bitmap bmp, int quality) {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        bmp.compress(CompressFormat.JPEG, quality, output);
        byte[] result = output.toByteArray();

        try {
            output.close();
        } catch (Exception var5) {
            var5.printStackTrace();
        }

        return result;
    }

    public static Bitmap getBitmapFromRes(Context context, int resId) {
        Options options = new Options();
        options.inJustDecodeBounds = false;
        options.inTempStorage = new byte[102400];
        options.inPreferredConfig = Config.ARGB_8888;
        options.inPurgeable = true;
        options.inInputShareable = true;

        try {
            Bitmap bmp = BitmapFactory.decodeResource(context.getResources(), resId, options);
            return bmp;
        } catch (OutOfMemoryError var5) {
            StatisticsBase.onNlogStatEvent("INIT_OOM_EEROR");
            return null;
        }
    }

    public static Bitmap getBitmapFromRes(Context context, int resId, int newWidth, int newHeight) {
        Bitmap bitmap = getBitmapFromRes(context, resId);
        if(bitmap == null) {
            return null;
        } else {
            try {
                int width = bitmap.getWidth();
                int height = bitmap.getHeight();
                if(width == newWidth && height == newHeight) {
                    return bitmap;
                } else {
                    float scaleWidth = (float)newWidth / (float)width;
                    float scaleHeight = (float)newHeight / (float)height;
                    Matrix matrix = new Matrix();
                    matrix.postScale(scaleWidth, scaleHeight);
                    return Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
                }
            } catch (Exception var10) {
                return null;
            }
        }
    }

    private static int computeSampleSize(Options options, int minSideLength, int maxNumOfPixels) {
        int initialSize = computeInitialSampleSize(options, minSideLength, maxNumOfPixels);
        int roundedSize;
        if(initialSize <= 8) {
            for(roundedSize = 1; roundedSize < initialSize; roundedSize <<= 1) {
                ;
            }
        } else {
            roundedSize = (initialSize + 7) / 8 * 8;
        }

        return roundedSize;
    }

    private static int computeInitialSampleSize(Options options, int minSideLength, int maxNumOfPixels) {
        double w = (double)options.outWidth;
        double h = (double)options.outHeight;
        int lowerBound = maxNumOfPixels == -1?1:(int)Math.ceil(Math.sqrt(w * h / (double)maxNumOfPixels));
        int upperBound = minSideLength == -1?128:(int)Math.min(Math.floor(w / (double)minSideLength), Math.floor(h / (double)minSideLength));
        return upperBound < lowerBound?lowerBound:(maxNumOfPixels == -1 && minSideLength == -1?1:(minSideLength == -1?lowerBound:upperBound));
    }
}
