

import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningServiceInfo;
import android.content.Context;
import android.content.Intent;
import android.content.Intent.ShortcutIconResource;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.Point;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Process;
import android.os.Build.VERSION;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.WindowManager.LayoutParams;
import android.view.inputmethod.InputMethodManager;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.util.List;

public class WindowUtils {
    public static final int DESKTOP_ZUOYEBANG = 0;

    public WindowUtils() {
    }

    public static int getScreenHeight(Activity activity) {
        DisplayMetrics metrics = new DisplayMetrics();
        activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
        return metrics.heightPixels;
    }

    public static int getScreenWidth(Activity activity) {
        DisplayMetrics metrics = new DisplayMetrics();
        activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
        return metrics.widthPixels;
    }

    public static Point getDisplay(Activity activity) {
        Display display = activity.getWindowManager().getDefaultDisplay();
        Point point = new Point();
        if(VERSION.SDK_INT >= 13) {
            display.getSize(point);
        } else {
            point.x = display.getWidth();
            point.y = display.getHeight();
        }

        return point;
    }

    public static boolean isSoftInputVisibie(Activity activity) {
        LayoutParams params = activity.getWindow().getAttributes();
        return (params.softInputMode & 4) > 0;
    }

    public static void showInputMethod(Activity activity) {
        if(activity != null) {
            InputMethodManager inputMethodManager = (InputMethodManager)activity.getSystemService("input_method");
            if(activity.getCurrentFocus() != null) {
                inputMethodManager.showSoftInput(activity.getCurrentFocus(), 0);
            }

        }
    }

    public static void showInputMethod(Activity activity, View view) {
        view.requestFocus();
        showInputMethod(activity);
    }

    public static void hideInputMethod(Activity activity) {
        if(activity != null) {
            InputMethodManager inputMethodManager = (InputMethodManager)activity.getSystemService("input_method");
            if(activity.getCurrentFocus() != null) {
                inputMethodManager.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(), 0);
            } else if(activity.getWindow() != null && activity.getWindow().getDecorView() != null) {
                inputMethodManager.hideSoftInputFromWindow(activity.getWindow().getDecorView().getWindowToken(), 0);
            }

        }
    }

    public static boolean startWap(String url, Activity activity) {
        try {
            Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(url));
            activity.startActivity(intent);
            return true;
        } catch (Exception var3) {
            return false;
        }
    }

    public static boolean installApk(Context context, File apkFile) {
        try {
            Intent intent = new Intent("android.intent.action.VIEW");
            intent.setDataAndType(Uri.fromFile(apkFile), "application/vnd.android.package-archive");
            intent.setFlags(268435456);
            context.startActivity(intent);
            return true;
        } catch (Throwable var3) {
            var3.printStackTrace();
            return false;
        }
    }

    public static void exitApp(Context context) {
        Intent startMain = new Intent("android.intent.action.MAIN");
        startMain.addCategory("android.intent.category.HOME");
        startMain.setFlags(268435456);
        context.startActivity(startMain);
        Process.killProcess(Process.myPid());
    }

    public static void addShortcut(Context context, String shortcutName, Class clazz) {
        addShortcut(context, shortcutName, clazz, 0);
    }

    public static void addShortcut(Context context, String folderName, Class clazz, int imageId) {
        Intent shortcutIntent = new Intent(context, clazz);
        Intent addIntent = new Intent();
        if(imageId == 0) {
            shortcutIntent.setAction("android.intent.action.MAIN");
            shortcutIntent.addCategory("android.intent.category.LAUNCHER");
            addIntent.putExtra("android.intent.extra.shortcut.ICON_RESOURCE", ShortcutIconResource.fromContext(context, drawable.ic_launcher));
        } else {
            addIntent.putExtra("android.intent.extra.shortcut.ICON_RESOURCE", ShortcutIconResource.fromContext(context, imageId));
        }

        addIntent.putExtra("duplicate", false);
        addIntent.putExtra("android.intent.extra.shortcut.INTENT", shortcutIntent);
        addIntent.putExtra("android.intent.extra.shortcut.NAME", folderName);
        addIntent.setAction("com.android.launcher.action.INSTALL_SHORTCUT");
        context.sendBroadcast(addIntent);
    }

    public static final boolean isRunningService(Context context, String name) {
        ActivityManager myManager = (ActivityManager)context.getSystemService("activity");
        List<RunningServiceInfo> runningService = myManager.getRunningServices(1000);
        if(runningService != null) {
            for(int i = 0; i < runningService.size(); ++i) {
                if(((RunningServiceInfo)runningService.get(i)).service.getClassName().toString().equals(name)) {
                    return true;
                }
            }
        }

        return false;
    }

    public static final String getSystemProperty(String propName) {
        BufferedReader input = null;

        Object var4;
        try {
            java.lang.Process p = Runtime.getRuntime().exec("getprop " + propName);
            input = new BufferedReader(new InputStreamReader(p.getInputStream()), 1024);
            String line = input.readLine();
            input.close();
            return line;
        } catch (IOException var14) {
            var14.printStackTrace();
            var4 = null;
        } finally {
            if(input != null) {
                try {
                    input.close();
                } catch (IOException var13) {
                    var13.printStackTrace();
                }
            }

        }

        return (String)var4;
    }

    public static int getStatusBarHeight() {
        int result = 0;
        int resourceId = InitApplication.getApplication().getResources().getIdentifier("status_bar_height", "dimen", "android");
        if(resourceId > 0) {
            result = InitApplication.getApplication().getResources().getDimensionPixelSize(resourceId);
        }

        return result;
    }

    public static boolean isFlyme() {
        try {
            Method method = Build.class.getMethod("hasSmartBar", new Class[0]);
            return method != null;
        } catch (Exception var1) {
            return false;
        }
    }

    public static String getMetaValue(Context context, String metaKey) {
        Bundle metaData = null;
        String apiKey = null;
        if(context != null && metaKey != null) {
            try {
                ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(), 128);
                if(null != ai) {
                    metaData = ai.metaData;
                }

                if(null != metaData) {
                    apiKey = metaData.getString(metaKey);
                }
            } catch (NameNotFoundException var5) {
                ;
            }

            return apiKey;
        } else {
            return null;
        }
    }
}
