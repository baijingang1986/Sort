
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Handler;
import android.os.Looper;
import android.util.SparseArray;

public class GameSoundPoolManager {
    private static GameSoundPoolManager mInstance;
    private SparseArray<Integer> mSparseArray = new SparseArray<>();
    private SoundPool mSoundPool;
    private Handler mHandler = new Handler(Looper.getMainLooper());

    private GameSoundPoolManager() {

    }

    public static GameSoundPoolManager getInstance() {
        if (mInstance == null) {
            mInstance = new GameSoundPoolManager();
        }
        return mInstance;
    }

    private void initSoundPool() {
        if (mSoundPool == null) {
            mSoundPool = new SoundPool(1, AudioManager.STREAM_MUSIC, 0);
            mSparseArray.put(SoundType.MP3_1.ordinal(), mSoundPool.load(.getApplication(), R.raw.sound_1, 1));
        }
    }

    /**
     * 预加载，播放时再初始化，导致第一次有可能播放不了
     */
    public void prepareLoad(){
        initSoundPool();
    }

    public boolean play(SoundType soundType) {
        if (!PreferenceUtils.getBoolean(CartoonPreference.GAME_SOUND_STATUS)) {
            return false;
        }
        initSoundPool();
        if (mSoundPool != null) {
            int soundId = mSparseArray.get(soundType.ordinal(), -1);
            if (soundId != -1) {
                handleAudioVolume(soundType);
                int streamId = mSoundPool.play(soundId, 1.0F, 1.0F, 1, 0, 1);
                return streamId != 0;
            }
        }

        return false;
    }

    public void release() {
        if (mSoundPool != null) {
            mSoundPool.release();
            mSoundPool = null;
        }
        mHandler.removeCallbacksAndMessages(null);
        mSparseArray.clear();
        mInstance = null;
    }

    private void handleAudioVolume(SoundType soundType ){
        switch(soundType){
//            case MP3_13:
//                setAudioVolume(3000);
//                break;
//            case MP3_14:
//                setAudioVolume(6000);
//                break;
            default:

        }
    }

    private void setAudioVolume(long delayMillis){
        BackgroundSoundPlayer.getInstance().setVolume(BackgroundSoundPlayer.VOLUME_LOWER);
        mHandler.postDelayed(new Runnable() {
            @Override
            public void run() {
                BackgroundSoundPlayer.getInstance().setVolume(BackgroundSoundPlayer.VOLUME_DEFAULT);
            }
        },delayMillis);
    }

    public enum SoundType{
        MP3_1,
    }
}
